import nltk
from nltk.corpus import *
from collections import Counter
from fractions import Fraction
from decimal import Decimal
import sys   
sys.setrecursionlimit(100000)
emma = gutenberg.words('austen-emma.txt')
#print(emma)
'''
with open("input_file.txt","w", encoding = "utf-8") as input_file:
    for i in emma:
        input_file.write(i)
        input_file.write(' ')
'''   
with open("input_file2.txt","r", encoding = 'utf-8') as f:
    file = f.readlines()
    
char_counts = Counter()
s = ""
for line in file:
    s += line
    char_counts += Counter(line)

temp_key = sorted(dict(char_counts), key = dict(char_counts).get,reverse = True)
store, decode_interval = {}, {}
total= 0
for k,v in char_counts.items():
    store[k] = v
    total += v
cal = 0
for k,v in store.items():
    store[k] = Fraction(v,total)
    temp = cal + store[k]
    decode_interval[k] = cal, temp
    cal += store[k]

low, high = Fraction(0,1), Fraction(1,1)
for code in file[0]:
    temp = low
    low += (high - low) * decode_interval[code][0]

    high = temp + (high - temp) * decode_interval[code][1]



def arithmetic_decodeing(n = low, l = len(file[0])):
    result = ""
    length = len(str(n))
    while l > len(result):
        for code, (start, high) in decode_interval.items():
            if start <= n and n < high:
      
                result += code
                n = (n - start) / (high - start)
      
                if len(result) >= l:
                    break
                
    
    print(result)
    return result

